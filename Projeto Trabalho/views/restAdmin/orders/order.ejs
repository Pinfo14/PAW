 <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
      <h2 class="m-0 flex-grow-1">
        <i class="bi bi-card-checklist me-2"></i>Lista de Encomendas
      </h2>
      <div>
        <a href="/rest/orders/new" class="btn btn-success">
          <i class="bi bi-plus-circle"></i> Nova Encomenda
        </a>
      </div>
    </div>
  
    <!-- formulário abaixo -->
    <div class="mt-3">
      <form action="/rest/prep-time" method="POST" class="d-flex align-items-center flex-wrap gap-2">
        <label for="prep-mins" class="form-label mb-0">Tempo médio por refeição (minutos)</label>
        <input
          type="number"
          min="1"
          name="minutes"
          id="prep-mins"
          class="form-control form-control-sm"
          style="width: 100px"
          placeholder="3 min"
          value="<%= currentPrepTime %>"
          required
        >
        <button class="btn btn-sm btn-outline-primary">Atualizar</button>
      </form>
    </div>
  </div>
  
  <!-- filtros -->
  <div class="row mb-3 g-2">
    <div class="col-sm-4">
      <label for="filter-date" class="form-label small">Filtrar por data</label>
      <select id="filter-date" class="form-select">
        <option value="">Todas</option>
        <% dates.forEach(date => { %>
          <option value="<%= date %>"><%= date %></option>
        <% }) %>
      </select>
    </div>
    <div class="col-sm-4">
      <label for="filter-nif" class="form-label small">Filtrar por NIF</label>
      <input
        id="filter-nif"
        type="text"
        class="form-control"
        placeholder="Só dígitos"
        pattern="^\\d{9}$"
        maxlength="9"
      >
      <div class="invalid-feedback">NIF inválido</div>
    </div>
    <div class="col-sm-4">
      <label for="filter-email" class="form-label small">Filtrar por Email de Cliente</label>
      <input id="filter-email" type="email" class="form-control" placeholder="email@exemplo.com">
    </div>
    <div class="col-12 text-end">
      <button id="clear-filters" class="btn btn-outline-secondary btn-sm">Limpar filtros</button>
    </div>
  </div>
  
  <table class="table table-striped table-bordered align-middle text-center">
    <thead class="table-dark">
      <tr>
        <th>Número</th>
        <th>Cliente</th>
        <th>Conteúdo</th>
        <th>Hora do pedido</th>
        <th>Hora de entrega</th>
        <th>Tempo de preparação</th>
        <th>Estado Atual do Pedido</th>
        <th>Total (€)</th>
        <th>Opções</th>
      </tr>
    </thead>
    <tbody>
      <% if (orders.length === 0) { %>
        <tr><td colspan="9">Nenhuma encomenda encontrada.</td></tr>
      <% } else { %>
        <% orders.forEach(order => {
            const ordered   = order.currentStatus === 'Ordered' && !order.canceledMeal;
            const cancelled = order.canceledMeal;
            const elapsedMs = Date.now() - new Date(order.createdAt).getTime();
            const canCancel = ordered && elapsedMs <= 5 * 60000;
            const expireAt  = new Date(order.createdAt).getTime() + 5 * 60000;
            const total = order.meals.reduce((sum, m) => {
              const price = m.sizes[0]?.price || 0;
                return sum + price * (m.quantity || 1);
            }, 0);

            let badgeColor;
            if (cancelled) {
              badgeColor = 'danger';
            } else {
              switch(order.currentStatus) {
                case 'Ordered':   badgeColor = 'secondary'; break;
                case 'Preparing': badgeColor = 'warning';   break;
                case 'Ready':     badgeColor = 'info';      break;
                case 'Delivered': badgeColor = 'success';   break;
                default:          badgeColor = 'secondary';
              }
            }
        %>
        <tr
          data-date="<%= order.createdAt.toISOString().split('T')[0] %>"
          data-nif="<%= order.customer.nif %>"
          data-email="<%= order.customer.email %>"
          data-details-id="details-<%= order._id %>"
        >
          <td><%= order.customId %></td>
          <td><%= order.customer.name %></td>
          <td><%= order.meals.map(m => m.name).join(', ') %></td>
          <td><%= new Date(order.createdAt)
                       .toLocaleTimeString('pt-PT',{hour:'2-digit',minute:'2-digit'}) %>
          </td>
          <td>
            <%= order.currentStatus === 'Delivered'
                ? new Date(order.deliveredAt)
                    .toLocaleTimeString('pt-PT',{hour:'2-digit',minute:'2-digit'})
                : 'Não entregue' %>
          </td>
          <td><%= order.preparationTime %> min</td>
          <td>
            <span class="badge bg-<%= badgeColor %>">
              <%= cancelled ? 'Cancelada' : order.currentStatus %>
            </span>
          </td>
          <td><%= total.toFixed(2) %></td>
          <td>
            <div class="d-flex flex-wrap align-items-center gap-1">
              <div class="btn-group btn-group-sm" role="group">
                <% if (!cancelled) { %>
                  <% if (ordered) { %>
                    <form class="status-form" data-order-id="<%= order._id %>"
                          action="/rest/orders/<%= order._id %>/status" method="POST">
                      <input type="hidden" name="next" value="Preparing">
                      <button class="btn btn-primary">→ Em preparação</button>
                    </form>
                  <% } else if (order.currentStatus === 'Preparing') { %>
                    <form class="status-form" data-order-id="<%= order._id %>"
                          action="/rest/orders/<%= order._id %>/status" method="POST">
                      <input type="hidden" name="next" value="Ready">
                      <button class="btn btn-info">→ Pronto</button>
                    </form>
                  <% } else if (order.currentStatus === 'Ready') { %>
                    <form class="status-form" data-order-id="<%= order._id %>"
                          action="/rest/orders/<%= order._id %>/status" method="POST">
                      <input type="hidden" name="next" value="Delivered">
                      <button class="btn btn-success">→ Entregue</button>
                    </form>
                  <% } else { %>
                    <button class="btn btn-secondary" disabled>Concluído</button>
                  <% } %>
  
                  <form action="/rest/orders/<%= order._id %>/cancel" method="POST">
                    <button id="cancel-btn-<%= order._id %>"
                            class="btn <%= canCancel ? 'btn-danger' : 'btn-secondary' %>"
                            <%= canCancel ? '' : 'disabled' %>>
                      Cancelar
                    </button>
                  </form>
                <% } else { %>
                  <button class="btn btn-danger" disabled>Cancelado</button>
                <% } %>
              </div>
  
              <% if (ordered) { %>
                <span id="timer-<%= order._id %>"
                      class="badge bg-light text-dark ms-1 countdown-timer"
                      data-expire="<%= new Date(expireAt).toISOString() %>">
                  05:00
                </span>
              <% } %>
  
              <button class="btn btn-outline-secondary btn-sm toggle-details-btn ms-2"
                      data-details-id="details-<%= order._id %>">
                Dados de cliente
              </button>
            </div>
          </td>
        </tr>
        
        <!-- Dados do Cliente quando se carrega no botão -->
        <tr id="details-<%= order._id %>" class="bg-light d-none">
          <td colspan="9" class="p-0">
            <table class="table mb-0">
              <tbody>
                <!-- Dados do Cliente -->
                <tr><th>Nome</th>      <td><%= order.customer.name %></td></tr>
                <% if (/^[568]/.test(order.customer.nif)) { %>
                  <tr><th>Empresa</th>  <td><%= order.customer.companyName %></td></tr>
                <% } %>
                <tr><th>Email</th>     <td><%= order.customer.email %></td></tr>
                <tr><th>Contacto</th>  <td><%= order.customer.contact %></td></tr>
                <tr><th>NIF</th>       <td><%= order.customer.nif %></td></tr>
                <tr><th>Morada Faturação</th>
                  <td>
                    <%= order.customer.location.address.street %><br>
                    <%= order.customer.location.address.postalCode %>
                    <%= order.customer.location.address.city %><br>
                    <small>
                      Lat: <%= order.customer.location.coordinates.lat %>,
                      Lon: <%= order.customer.location.coordinates.lon %>
                    </small>
                  </td>
                </tr>
                <tr><th>Morada de Entrega</th>
                  <td>
                    <%= order.customer.deliveryLocation.address.street %><br>
                    <%= order.customer.deliveryLocation.address.postalCode %>
                    <%= order.customer.deliveryLocation.address.city %><br>
                    <small>
                      Lat: <%= order.customer.deliveryLocation.coordinates.lat %>,
                      Lon: <%= order.customer.deliveryLocation.coordinates.lon %>
                    </small>
                  </td>
                </tr>
  
                <!-- Dados do Worker -->
                <tr>
                  <th>Atendido por</th>
                  <td><%= order.worker.name %> (<%= order.worker.email %>)</td>
                </tr>
  
                <!-- Data do pedido -->
                <tr>
                    <th>Data do Pedido</th>
                    <td><%= new Date(order.createdAt).toLocaleDateString('pt-PT') %></td>
                </tr>
              </tbody>
            </table>
          </td>
        </tr>
        <% }) %>
      <% } %>
    </tbody>
  </table>
  
  
  <!-- paginação -->
  <nav id="pagination" class="my-3 text-center"></nav>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    const pageSize = 7;
    const allRows = Array.from(document.querySelectorAll('tbody tr[data-details-id]'));
    let visibleRows = allRows.slice();
    let currentPage = 1;
    const nav = document.getElementById('pagination');

    function isValidNif(n) {
        return /^\d{9}$/.test(n);
    }

    function renderPage() {
        const totalPages = Math.ceil(visibleRows.length / pageSize);

        // esconder tudo
        allRows.forEach(row => {
            row.style.display = 'none';
            const det = document.getElementById(row.dataset.detailsId);
            if (det) det.classList.add('d-none');
        });

        // mostrar apenas esta página
        visibleRows.forEach((row, i) => {
            if (i >= (currentPage - 1) * pageSize && i < currentPage * pageSize) {
                row.style.display = '';
            }
        });

        // construir botões da página
        nav.innerHTML = '';
        for (let p = 1; p <= totalPages; p++) {
            const btn = document.createElement('button');
            btn.textContent = p;
            btn.className = 'btn btn-sm mx-1 ' + (p === currentPage ? 'btn-primary' : 'btn-outline-primary');
            btn.onclick = () => {
                currentPage = p;
                renderPage();
            };
            nav.appendChild(btn);
        }

        nav.style.display = totalPages > 1 ? '' : 'none';
    }

    function applyFilters() {
        const selDate  = document.getElementById('filter-date').value;
        const nifInp   = document.getElementById('filter-nif');
        const emailVal = document.getElementById('filter-email').value.trim().toLowerCase();
        const nifVal   = nifInp.value.trim();

        nifInp.classList.toggle('is-invalid', !(nifVal === '' || isValidNif(nifVal)));

        visibleRows = [];
        allRows.forEach(row => {
            let show = true;
            if (selDate   && row.dataset.date  !== selDate)  show = false;
            if (nifVal    && row.dataset.nif   !== nifVal)   show = false;
            if (emailVal  && !row.dataset.email.toLowerCase().includes(emailVal)) show = false;
            if (show) visibleRows.push(row);
        });

        currentPage = 1;
        renderPage();
    }

    ['change','input'].forEach(ev => {
        document.getElementById('filter-date').addEventListener(ev, applyFilters);
        document.getElementById('filter-nif').addEventListener(ev, applyFilters);
        document.getElementById('filter-email').addEventListener(ev, applyFilters);
    });

    document.getElementById('clear-filters').addEventListener('click', e => {
        e.preventDefault();
        ['filter-date','filter-nif','filter-email'].forEach(id => document.getElementById(id).value = '');
        document.getElementById('filter-nif').classList.remove('is-invalid');
        visibleRows = allRows.slice();
        currentPage = 1;
        renderPage();
    });

    document.body.addEventListener('click', e => {
        if (!e.target.classList.contains('toggle-details-btn')) return;
        const det = document.getElementById(e.target.dataset.detailsId);
        const hidden = det.classList.toggle('d-none');
        e.target.classList.toggle('btn-secondary', !hidden);
        e.target.classList.toggle('btn-outline-secondary', hidden);
    });

    document.querySelectorAll('.countdown-timer').forEach(span => {
        const expire = new Date(span.dataset.expire).getTime();
        const btn    = document.getElementById(`cancel-btn-${span.id.split('-')[1]}`);
        function tick() {
            let diff = expire - Date.now();
            if (diff < 0) diff = 0;
            const m = String(Math.floor(diff/60000)).padStart(2,'0'),
                  s = String(Math.floor((diff%60000)/1000)).padStart(2,'0');
            span.textContent = `${m}:${s}`;
            if (diff === 0) {
                btn.disabled = true;
                btn.classList.replace('btn-danger','btn-secondary');
                clearInterval(span._timer);
            }
        }
        tick();
        span._timer = setInterval(tick,1000);
    });

    document.querySelectorAll('.status-form').forEach(form => {
        form.addEventListener('submit', () => {
            const id   = form.dataset.orderId;
            const span = document.getElementById(`timer-${id}`);
            const btn  = document.getElementById(`cancel-btn-${id}`);
            if (span) clearInterval(span._timer), span.textContent = '00:00';
            if (btn)  btn.disabled = true, btn.classList.replace('btn-danger','btn-secondary');
        });
    });

    applyFilters();
</script>

<script>

  // Stub mínimo para não quebrar o código
  function updateConnectionStatus(status) {
    console.log('[SSE] connection status:', status);
    // Se quiseres, podes actualizar aqui um badge no UI:
    // document.getElementById('sse-status').textContent = status;
  }
let eventSource = null;
let connectionStatusIndicator = null;



function startSSEConnection() {
    updateConnectionStatus('connecting');
    
    if (eventSource) {
        eventSource.close();
    }

    eventSource = new EventSource('/api/orders/stream');

    eventSource.onopen = function() {
        updateConnectionStatus('connected');
        console.log('Conexão SSE estabelecida');
    };

    eventSource.onmessage = function(event) {
        try {
            const data = JSON.parse(event.data);
            handleOrderUpdate(data);
        } catch (error) {
            console.error('Erro ao processar evento SSE:', error);
        }
    };

    eventSource.onerror = function(error) {
        updateConnectionStatus('disconnected');
        console.error('Erro na conexão SSE:', error);
        
        // Tenta reconectar após 5 segundos
        setTimeout(() => {
            console.log('Tentando reconectar...');
            startSSEConnection();
        }, 5000);
    };
}


function handleOrderUpdate(data) {
    console.log('Atualização recebida:', data);
    
    // Se for cancelamento pelo cliente (frontoffice)
    if (data.type === 'order-cancelled' && data.source === 'frontend') {
        updateOrderInTable(data);
        showNotification(`Encomenda #${id.slice(-6)} foi cancelada pelo cliente`, 'warning');
    }
    // Se for atualização de status
    else if (data.type === 'order-updated') {
        updateOrderInTable(data);
        showNotification(`Encomenda #${id.slice(-6)} foi atualizada`, 'info');
    }
}


function updateOrderInTable(data) {
    // Encontra a linha da encomenda na tabela
    const id       = data.order._id;
    const orderRow = document.querySelector(`tr[data-details-id="details-${id}"]`);
    
    if (!orderRow) {
        // Se não encontrou, pode ser uma nova encomenda - recarrega a página
        setTimeout(() => {
            window.location.reload();
        }, 1000);
        return;
    }

    // Atualiza o status visual
    const statusBadge = orderRow.querySelector('.badge');
    if (statusBadge && data.order.canceledMeal) {
        statusBadge.textContent = 'Cancelada';
        statusBadge.className = 'badge bg-danger';
    }

    // Atualiza os botões de ação
    const buttonContainer = orderRow.querySelector('.btn-group');
    if (buttonContainer && data.order.canceledMeal) {
        buttonContainer.innerHTML = '<button class="btn btn-danger" disabled>Cancelado</button>';
    }

    // Remove o timer se existir
    const timer = orderRow.querySelector('.countdown-timer');
    if (timer) {
        clearInterval(timer._timer);
        timer.style.display = 'none';
    }

    // Adiciona efeito visual de atualização
    orderRow.style.transition = 'background-color 0.5s ease';
    orderRow.style.backgroundColor = '#fff3cd';
    setTimeout(() => {
        orderRow.style.backgroundColor = '';
    }, 2000);
}




// Inicia a conexão quando a página carrega
document.addEventListener('DOMContentLoaded', function() {
    startSSEConnection();
});

// Limpa conexões quando a página é fechada
window.addEventListener('beforeunload', function() {
    if (eventSource) {
        eventSource.close();
    }
});


</script>

  